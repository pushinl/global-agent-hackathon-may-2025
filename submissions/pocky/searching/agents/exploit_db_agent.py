import json
import re
from agno.core.base import Agent
from agno.utils.prompt import load_prompt
from tools.exploit_db_tool import ExploitDBTool
from models.openai_agent import OpenAIAgent


class ExploitDBAgent(Agent):
	"""
	Agent for retrieving Exploit-DB search results using a CVE-based and keyword-based dual approach.
	"""

	def __init__(
		self,
		model: OpenAIAgent,
		api_key: str,
		prompt_path: str = "prompts/exploit_db_query_prompt.txt"
	):
		"""
		Initialize the agent with model and Exa-based tool.

		Args:
			model (OpenAIAgent): GPT model wrapper
			api_key (str): Exa API key
			prompt_path (str): Path to the prompt template
		"""
		super().__init__(name="exploit-db-agent")
		self.model = model
		self.prompt = load_prompt(prompt_path)
		self.tool = ExploitDBTool(api_key=api_key)

	def run(self, cve_path: str) -> str:
		"""
		Main entry to run the agent on a CVE JSON file.

		Args:
			cve_path (str): Path to CVE input JSON file

		Returns:
			str: Combined plain-text result of both searches
		"""
		with open(cve_path, "r", encoding="utf-8") as f:
			data = json.load(f)

		cve_id = data.get("cve_id") or data.get("id", "").strip()
		description = data.get("descriptions") or data.get("description", "").strip()

		# First search by CVE ID
		result_by_cve = self.tool.fetch_by_cve(cve_id)

		# Ask LLM to extract dependency query
		messages = [
			{"role": "system", "content": self.prompt},
			{"role": "user", "content": json.dumps({
				"id": cve_id,
				"description": description
			}, indent=2)}
		]

		llm_response = self.model.chat(messages)

		# Try to parse JSON or fallback with regex
		query_term = ""
		try:
			query_obj = json.loads(llm_response)
			query_term = query_obj.get("query_content", "").strip()
		except Exception:
			match = re.search(r'"query_content"\s*:\s*"([^"]+)"', llm_response)
			if match:
				query_term = match.group(1).strip()

		# Second search by extracted query
		result_by_query = self.tool.fetch_by_query(query_term) if query_term else "[ERROR] Failed to extract query term."

		# Combine both results
		final_output = f"""========================
Exploit-DB Search by CVE ID: {cve_id}
========================
{result_by_cve}

========================
Exploit-DB Search by Dependency Query: "{query_term}"
========================
{result_by_query}
"""
		return final_output.strip()
