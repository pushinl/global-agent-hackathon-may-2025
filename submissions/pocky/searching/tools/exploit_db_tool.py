from exa_py import Exa

class ExploitDBTool:
	"""
	Uses the official Exa API to search Exploit-DB content via two modes:
	- By CVE ID: site:exploit-db.com <CVE-ID>
	- By query term (e.g., framework/library name): site:exploit-db.com <keyword>
	"""

	def __init__(self, api_key: str):
		"""
		Initialize the Exa client with a valid API key.

		Args:
			api_key (str): Your Exa API key (starts with 'exa_live_...')
		"""
		self.exa = Exa(api_key)

	def fetch_by_cve(self, cve_id: str) -> str:
		"""
		Perform a search using the CVE ID.

		Args:
			cve_id (str): e.g., 'CVE-2023-4450'

		Returns:
			str: Formatted plain text of search results
		"""
		query = f"site:exploit-db.com {cve_id}"
		return self._search_and_format(query)

	def fetch_by_query(self, keyword: str) -> str:
		"""
		Perform a search using a query keyword.

		Args:
			keyword (str): e.g., 'ThinkPHP', 'JimuReport'

		Returns:
			str: Formatted plain text of search results
		"""
		query = f"site:exploit-db.com {keyword}"
		return self._search_and_format(query)

	def _search_and_format(self, query: str) -> str:
		"""
		Perform the Exa search and format the results.

		Args:
			query (str): The final search query

		Returns:
			str: Formatted text with title, URL, and snippet for each result
		"""
		try:
			response = self.exa.search_and_contents(query, text=True)
			entries = response.results  # List of Result objects
		except Exception as e:
			return f"[ERROR] Exa search failed: {e}"

		if not entries:
			return "[INFO] No results found for query."

		output = [f"# Search Query: {query}\n"]
		for r in entries:
			url = r.url or ""
			title = r.title or ""
			text = r.text or ""
			output.append(f"---\nTitle: {title}\nURL: {url}\n{text.strip()}\n")

		return "\n".join(output).strip()
